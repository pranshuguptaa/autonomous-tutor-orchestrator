---
- name: Configure Runtime Environment for Autonomous AI Tutor Orchestrator
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    app_directory: "/opt/{{ app_name }}"
    app_user: "tutorapp"
    app_group: "tutorapp"

  tasks:
    - name: Update apt package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == 'Debian'

    - name: Install required system packages
      package:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - tree
          - net-tools
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - python3
          - python3-pip
          - python3-venv
          - docker.io
          - docker-compose
        state: present
      when: ansible_os_family == 'Debian'

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Create application user
      user:
        name: "{{ app_user }}"
        comment: "User for Autonomous AI Tutor Orchestrator"
        system: yes
        shell: /bin/bash
        home: "{{ app_directory }}"
        create_home: yes

    - name: Create application directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'
      loop:
        - "{{ app_directory }}"
        - "{{ app_directory }}/logs"
        - "{{ app_directory }}/config"
        - "{{ app_directory }}/data"

    - name: Create environment configuration file
      template:
        src: templates/.env.j2
        dest: "{{ app_directory }}/config/.env"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0600'

    - name: Create systemd service file for the application
      template:
        src: templates/tutor-orchestrator.service.j2
        dest: /etc/systemd/system/tutor-orchestrator.service
        mode: '0644'

    - name: Create Docker Compose file for containerized deployment
      template:
        src: templates/docker-compose.yml.j2
        dest: "{{ app_directory }}/docker-compose.yml"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'

    - name: Pull Docker image
      docker_image:
        name: "{{ docker_image }}"
        source: pull
      become_user: "{{ app_user }}"

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable and start the application service
      systemd:
        name: tutor-orchestrator
        state: started
        enabled: yes

    - name: Create log rotation configuration
      template:
        src: templates/logrotate.j2
        dest: /etc/logrotate.d/tutor-orchestrator
        mode: '0644'

    - name: Set up monitoring user
      user:
        name: prometheus
        comment: "Prometheus monitoring user"
        system: yes
        shell: /bin/bash
        home: /var/lib/prometheus
        create_home: yes

    - name: Install Node Exporter for system monitoring
      unarchive:
        src: https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz
        dest: /tmp/
        remote_src: yes

    - name: Install Node Exporter binary
      copy:
        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter
        dest: /usr/local/bin/node_exporter
        mode: '0755'
        owner: prometheus
        group: prometheus
      notify: restart node_exporter

    - name: Create Node Exporter service
      template:
        src: templates/node-exporter.service.j2
        dest: /etc/systemd/system/node-exporter.service
        mode: '0644'
      notify: restart node_exporter

    - name: Enable and start Node Exporter
      systemd:
        name: node-exporter
        state: started
        enabled: yes
        daemon_reload: yes

  handlers:
    - name: restart node_exporter
      systemd:
        name: node-exporter
        state: restarted
